{"version":3,"sources":["../public/sw.js"],"names":["event","updateWidget","updateName","widgetDefinition","payload","name","request","fullPath"],"mappings":"AAAA,cACI,yEACJ,EAMA,KAAK,iBAAiB,gBAAkB,GAAU,CAC9C,EAAM,UAAU,EAAa,CAAK,CAAC,CACvC,CAAC,EAGD,KAAK,iBAAiB,eAAiB,GAAU,CAC7C,EAAM,UAAU,EAAa,CAAK,CAAC,CACvC,CAAC,EAID,KAAK,iBAAiB,cAAgB,GAAU,CAC5C,EAAM,QAAU,cAChB,EAAM,UAAU,EAAW,CAAK,CAAC,CAErC,CAAC,EAID,KAAK,iBAAiB,kBAAoB,GAAU,CAAA,CAAE,EAEtD,MAAM,EAAe,MAAO,GAAU,CAElC,MAAM,EAAmB,EAAM,OAAO,WAGhC,EAAU,CACZ,SAAU,KAAK,UAAU,MAAO,MAAM,MAAM,EAAiB,YAAY,GAAG,MAAM,EAClF,KAAM,KAAK,UAAU,MAAO,MAAM,MAAM,EAAiB,IAAI,GAAG,MAAM,CACzE,EAGD,MAAM,KAAK,QAAQ,mBAAmB,EAAM,WAAY,CAAO,CACnE,EAEM,EAAa,MAAO,GAAU,CAChC,MAAM,EAAO,EAAM,KAAK,KAAM,EAAC,KAGzB,EAAmB,EAAM,OAAO,WAGhC,EAAU,CACZ,SAAU,KAAK,UAAU,MAAO,MAAM,MAAM,EAAiB,YAAY,GAAG,MAAM,EAClF,KAAM,KAAK,UAAU,CAAC,KAAA,CAAI,CAAC,CAC9B,EAGD,MAAM,KAAK,QAAQ,mBAAmB,EAAM,WAAY,CAAO,CACnE,EAGA,QAAQ,WAAW,iBAAiB,o3FAAK,eAAiB,CAAA,CAAE,EAG5D,QAAQ,QAAQ,cACd,CAAC,CAAE,QAAA,CAAO,IAAO,EAAQ,OAAS,WAClC,MAAO,CAAE,MAAA,CAAK,IAEW,MADT,MAAM,OAAO,KAAK,QAAQ,WAAW,kBAAkB,aAAa,CAAC,GAChD,MAAM,aAAa,GAC7B,MAAM,EAAM,OAAO,CAEhD,EAEA,KAAK,iBAAiB,OAAS,GAAU,CACvC,EAAM,UACJ,KAAK,aAAa,iBAAiB,mBAAoB,CACrD,KAAM,yBACN,KAAM,2BACP,CAAA,CACL,CACA,CAAC,EACD,KAAK,iBAAiB,oBAAsB,GAAU,CACpD,EAAM,aAAa,MAAO,EAC1B,IAAI,EAAW,KAAK,SAAS,OAAS,EAAM,aAAa,KAAK,KAC9D,QAAQ,WAAW,CAAQ,CAC7B,CAAC","file":"sw.js","sourcesContent":["importScripts(\n    'https://storage.googleapis.com/workbox-cdn/releases/7.3.0/workbox-sw.js'\n);\n\n// This is your Service Worker, you can put any of your custom Service Worker\n// code in this file, above the `precacheAndRoute` line.\n\n// When widget is installed/pinned, push initial state.\nself.addEventListener('widgetinstall', (event) => {\n    event.waitUntil(updateWidget(event));\n});\n\n// When widget is shown, update content to ensure it is up-to-date.\nself.addEventListener('widgetresume', (event) => {\n    event.waitUntil(updateWidget(event));\n});\n\n// When the user clicks an element with an associated Action.Execute,\n// handle according to the 'verb' in event.action.\nself.addEventListener('widgetclick', (event) => {\nif (event.action == \"updateName\") {\n    event.waitUntil(updateName(event));\n}\n});\n\n// When the widget is uninstalled/unpinned, clean up any unnecessary\n// periodic sync or widget-related state.\nself.addEventListener('widgetuninstall', (event) => {});\n\nconst updateWidget = async (event) => {\n// The widget definition represents the fields specified in the manifest.\n    const widgetDefinition = event.widget.definition;\n\n    // Fetch the template and data defined in the manifest to generate the payload.\n    const payload = {\n        template: JSON.stringify(await (await fetch(widgetDefinition.msAcTemplate)).json()),\n        data: JSON.stringify(await (await fetch(widgetDefinition.data)).json()),\n    };\n\n    // Push payload to widget.\n    await self.widgets.updateByInstanceId(event.instanceId, payload);\n}\n\nconst updateName = async (event) => {\n    const name = event.data.json().name;\n\n    // The widget definition represents the fields specified in the manifest.\n    const widgetDefinition = event.widget.definition;\n\n    // Fetch the template and data defined in the manifest to generate the payload.\n    const payload = {\n        template: JSON.stringify(await (await fetch(widgetDefinition.msAcTemplate)).json()),\n        data: JSON.stringify({name}),\n    };\n\n    // Push payload to widget.\n    await self.widgets.updateByInstanceId(event.instanceId, payload);\n}\n\n// Workbox Precaching\nworkbox.precaching.precacheAndRoute(self.__WB_MANIFEST || []);\n\n// Navigation Routing\nworkbox.routing.registerRoute(\n  ({ request }) => request.mode === 'navigate',\n  async ({ event }) => {\n    const cache = await caches.open(workbox.precaching.getCacheKeyForURL('/index.html'));\n    const cachedResponse = await cache.match('/index.html');\n    return cachedResponse || fetch(event.request);\n  }\n);\n\nself.addEventListener('push', (event) => {\n  event.waitUntil(\n    self.registration.showNotification('New Notification', {\n      body: 'Notification Body Text',\n      icon: 'assets/icons/icon_512.png',\n    })\n  )\n});\nself.addEventListener('notificationclick', (event) => {\n  event.notification.close();\n  var fullPath = self.location.origin + event.notification.data.path;\n  clients.openWindow(fullPath);\n});\n"]}